// Code generated by goctl. DO NOT EDIT!
// Source: rpc-product.proto

//go:generate mockgen -destination ./productrpc_mock.go -package productrpc -source $GOFILE

package productrpc

import (
	"context"

	"gitlab.jhongnet.com/mall/rpc-product-server/product"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	ProductVariantDeleteResponse  = product.ProductVariantDeleteResponse
	ProductVariant                = product.ProductVariant
	CategoryListRequest           = product.CategoryListRequest
	ProductVariantAddResponse     = product.ProductVariantAddResponse
	ProductVariantUpdateRequest   = product.ProductVariantUpdateRequest
	CategoryProduct               = product.CategoryProduct
	CategoryProductDetailResponse = product.CategoryProductDetailResponse
	CategoryProductCountRequest   = product.CategoryProductCountRequest
	CategoryProductCountResponse  = product.CategoryProductCountResponse
	ProductDetailResponse         = product.ProductDetailResponse
	CategoryProductListRequest    = product.CategoryProductListRequest
	ProductDeleteRequest          = product.ProductDeleteRequest
	ProductImageUpdate            = product.ProductImageUpdate
	ProductVariantListResponse    = product.ProductVariantListResponse
	SpecItem                      = product.SpecItem
	ProductVariantAdd             = product.ProductVariantAdd
	ProductVariantCountResponse   = product.ProductVariantCountResponse
	ProductVariantDeleteRequest   = product.ProductVariantDeleteRequest
	ProductImageCountResponse     = product.ProductImageCountResponse
	CategoryProductDeleteRequest  = product.CategoryProductDeleteRequest
	PingRequest                   = product.PingRequest
	ProductCommentScoreRequest    = product.ProductCommentScoreRequest
	ProductAddResponse            = product.ProductAddResponse
	ProductCountRequest           = product.ProductCountRequest
	ProductVariantUpdateResponse  = product.ProductVariantUpdateResponse
	CategoryAddResponse           = product.CategoryAddResponse
	VariantAdd                    = product.VariantAdd
	CategoryListResponse          = product.CategoryListResponse
	CategoryDetailRequest         = product.CategoryDetailRequest
	CategoryCountResponse         = product.CategoryCountResponse
	ProductCommentSource          = product.ProductCommentSource
	ProductListResponse           = product.ProductListResponse
	ProductImageAddRequest        = product.ProductImageAddRequest
	ProductImageAddResponse       = product.ProductImageAddResponse
	ProductImageListRequest       = product.ProductImageListRequest
	ProductImageListResponse      = product.ProductImageListResponse
	CategoryProductListResponse   = product.CategoryProductListResponse
	CategoryProductAddRequest     = product.CategoryProductAddRequest
	ProductCommentScoreResponse   = product.ProductCommentScoreResponse
	ProductComment                = product.ProductComment
	ProductDetailRequest          = product.ProductDetailRequest
	ProductImageDetailRequest     = product.ProductImageDetailRequest
	ProductImageDetailResponse    = product.ProductImageDetailResponse
	ProductImage                  = product.ProductImage
	ProductDeleteResponse         = product.ProductDeleteResponse
	ProductUpdateRequest          = product.ProductUpdateRequest
	ProductVariantUpdate1         = product.ProductVariantUpdate1
	ProductCountResponse          = product.ProductCountResponse
	ProductVariantUpdate          = product.ProductVariantUpdate
	Product                       = product.Product
	ProductUpdateResponse         = product.ProductUpdateResponse
	ProductVariantDetailResponse  = product.ProductVariantDetailResponse
	Category                      = product.Category
	ProductImageAdd               = product.ProductImageAdd
	PingResponse                  = product.PingResponse
	ProductListRequest            = product.ProductListRequest
	ProductAddRequest             = product.ProductAddRequest
	ProductVariantListRequest     = product.ProductVariantListRequest
	ProductVariantCountRequest    = product.ProductVariantCountRequest
	CategoryProductAddResponse    = product.CategoryProductAddResponse
	ProductImageCountRequest      = product.ProductImageCountRequest
	CategoryAddRequest            = product.CategoryAddRequest
	CategoryDetailResponse        = product.CategoryDetailResponse
	CategoryCountRequest          = product.CategoryCountRequest
	CategoryProductDetailRequest  = product.CategoryProductDetailRequest
	ProductVariantAddRequest      = product.ProductVariantAddRequest
	ProductVariantDetailRequest   = product.ProductVariantDetailRequest
	CategoryProductDeleteResponse = product.CategoryProductDeleteResponse

	ProductRPC interface {
		Ping(ctx context.Context, in *PingRequest) (*PingResponse, error)
		ProductList(ctx context.Context, in *ProductListRequest) (*ProductListResponse, error)
		ProductDetail(ctx context.Context, in *ProductDetailRequest) (*ProductDetailResponse, error)
		ProductAdd(ctx context.Context, in *ProductAddRequest) (*ProductAddResponse, error)
		ProductUpdate(ctx context.Context, in *ProductUpdateRequest) (*ProductUpdateResponse, error)
		ProductCount(ctx context.Context, in *ProductCountRequest) (*ProductCountResponse, error)
		ProductDelete(ctx context.Context, in *ProductDeleteRequest) (*ProductDeleteResponse, error)
		ProductImageList(ctx context.Context, in *ProductImageListRequest) (*ProductImageListResponse, error)
		ProductImageDetail(ctx context.Context, in *ProductImageDetailRequest) (*ProductImageDetailResponse, error)
		ProductImageAdd(ctx context.Context, in *ProductImageAddRequest) (*ProductImageAddResponse, error)
		ProductImageCount(ctx context.Context, in *ProductImageCountRequest) (*ProductImageCountResponse, error)
		ProductVariantList(ctx context.Context, in *ProductVariantListRequest) (*ProductVariantListResponse, error)
		ProductVariantDetail(ctx context.Context, in *ProductVariantDetailRequest) (*ProductVariantDetailResponse, error)
		ProductVariantAdd(ctx context.Context, in *ProductVariantAddRequest) (*ProductVariantAddResponse, error)
		ProductVariantUpdate(ctx context.Context, in *ProductVariantUpdateRequest) (*ProductVariantUpdateResponse, error)
		ProductVariantCount(ctx context.Context, in *ProductVariantCountRequest) (*ProductVariantCountResponse, error)
		ProductVariantDelete(ctx context.Context, in *ProductVariantDeleteRequest) (*ProductVariantDeleteResponse, error)
		ProductCommentScoreList(ctx context.Context, in *ProductCommentScoreRequest) (*ProductCommentScoreResponse, error)
		CategoryList(ctx context.Context, in *CategoryListRequest) (*CategoryListResponse, error)
		CategoryDetail(ctx context.Context, in *CategoryDetailRequest) (*CategoryDetailResponse, error)
		CategoryAdd(ctx context.Context, in *CategoryAddRequest) (*CategoryAddResponse, error)
		CategoryCount(ctx context.Context, in *CategoryCountRequest) (*CategoryCountResponse, error)
		CategoryProductList(ctx context.Context, in *CategoryProductListRequest) (*CategoryProductListResponse, error)
		CategoryProductDetail(ctx context.Context, in *CategoryProductDetailRequest) (*CategoryProductDetailResponse, error)
		CategoryProductAdd(ctx context.Context, in *CategoryProductAddRequest) (*CategoryProductAddResponse, error)
		CategoryProductCount(ctx context.Context, in *CategoryProductCountRequest) (*CategoryProductCountResponse, error)
		CategoryProductDelete(ctx context.Context, in *CategoryProductDeleteRequest) (*CategoryProductDeleteResponse, error)
	}

	defaultProductRPC struct {
		cli zrpc.Client
	}
)

func NewProductRPC(cli zrpc.Client) ProductRPC {
	return &defaultProductRPC{
		cli: cli,
	}
}

func (m *defaultProductRPC) Ping(ctx context.Context, in *PingRequest) (*PingResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.Ping(ctx, in)
}

func (m *defaultProductRPC) ProductList(ctx context.Context, in *ProductListRequest) (*ProductListResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductList(ctx, in)
}

func (m *defaultProductRPC) ProductDetail(ctx context.Context, in *ProductDetailRequest) (*ProductDetailResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductDetail(ctx, in)
}

func (m *defaultProductRPC) ProductAdd(ctx context.Context, in *ProductAddRequest) (*ProductAddResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductAdd(ctx, in)
}

func (m *defaultProductRPC) ProductUpdate(ctx context.Context, in *ProductUpdateRequest) (*ProductUpdateResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductUpdate(ctx, in)
}

func (m *defaultProductRPC) ProductCount(ctx context.Context, in *ProductCountRequest) (*ProductCountResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductCount(ctx, in)
}

func (m *defaultProductRPC) ProductDelete(ctx context.Context, in *ProductDeleteRequest) (*ProductDeleteResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductDelete(ctx, in)
}

func (m *defaultProductRPC) ProductImageList(ctx context.Context, in *ProductImageListRequest) (*ProductImageListResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductImageList(ctx, in)
}

func (m *defaultProductRPC) ProductImageDetail(ctx context.Context, in *ProductImageDetailRequest) (*ProductImageDetailResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductImageDetail(ctx, in)
}

func (m *defaultProductRPC) ProductImageAdd(ctx context.Context, in *ProductImageAddRequest) (*ProductImageAddResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductImageAdd(ctx, in)
}

func (m *defaultProductRPC) ProductImageCount(ctx context.Context, in *ProductImageCountRequest) (*ProductImageCountResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductImageCount(ctx, in)
}

func (m *defaultProductRPC) ProductVariantList(ctx context.Context, in *ProductVariantListRequest) (*ProductVariantListResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductVariantList(ctx, in)
}

func (m *defaultProductRPC) ProductVariantDetail(ctx context.Context, in *ProductVariantDetailRequest) (*ProductVariantDetailResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductVariantDetail(ctx, in)
}

func (m *defaultProductRPC) ProductVariantAdd(ctx context.Context, in *ProductVariantAddRequest) (*ProductVariantAddResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductVariantAdd(ctx, in)
}

func (m *defaultProductRPC) ProductVariantUpdate(ctx context.Context, in *ProductVariantUpdateRequest) (*ProductVariantUpdateResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductVariantUpdate(ctx, in)
}

func (m *defaultProductRPC) ProductVariantCount(ctx context.Context, in *ProductVariantCountRequest) (*ProductVariantCountResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductVariantCount(ctx, in)
}

func (m *defaultProductRPC) ProductVariantDelete(ctx context.Context, in *ProductVariantDeleteRequest) (*ProductVariantDeleteResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductVariantDelete(ctx, in)
}

func (m *defaultProductRPC) ProductCommentScoreList(ctx context.Context, in *ProductCommentScoreRequest) (*ProductCommentScoreResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.ProductCommentScoreList(ctx, in)
}

func (m *defaultProductRPC) CategoryList(ctx context.Context, in *CategoryListRequest) (*CategoryListResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryList(ctx, in)
}

func (m *defaultProductRPC) CategoryDetail(ctx context.Context, in *CategoryDetailRequest) (*CategoryDetailResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryDetail(ctx, in)
}

func (m *defaultProductRPC) CategoryAdd(ctx context.Context, in *CategoryAddRequest) (*CategoryAddResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryAdd(ctx, in)
}

func (m *defaultProductRPC) CategoryCount(ctx context.Context, in *CategoryCountRequest) (*CategoryCountResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryCount(ctx, in)
}

func (m *defaultProductRPC) CategoryProductList(ctx context.Context, in *CategoryProductListRequest) (*CategoryProductListResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryProductList(ctx, in)
}

func (m *defaultProductRPC) CategoryProductDetail(ctx context.Context, in *CategoryProductDetailRequest) (*CategoryProductDetailResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryProductDetail(ctx, in)
}

func (m *defaultProductRPC) CategoryProductAdd(ctx context.Context, in *CategoryProductAddRequest) (*CategoryProductAddResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryProductAdd(ctx, in)
}

func (m *defaultProductRPC) CategoryProductCount(ctx context.Context, in *CategoryProductCountRequest) (*CategoryProductCountResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryProductCount(ctx, in)
}

func (m *defaultProductRPC) CategoryProductDelete(ctx context.Context, in *CategoryProductDeleteRequest) (*CategoryProductDeleteResponse, error) {
	client := product.NewProductRPCClient(m.cli.Conn())
	return client.CategoryProductDelete(ctx, in)
}
